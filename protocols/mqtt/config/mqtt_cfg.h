////////////////////////////////////////////////////////////////////////////////
// COPYRIGHT (c) 2023
// NOMNIO d.o.o.
// All rights reserved.
////////////////////////////////////////////////////////////////////////////////
/**
 *	@file		mqtt_cfg.h
 *	@author   	Tibor Sovilj
 *	@date		28.10.2023
 *	@version	V1.0.0

 *	@brief 		Configuration Header file for the MQTT protocol.
 */
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
 * 	@addtogroup MQTT_CONFIG
 * 	@{ <!-- BEGIN GROUP -->
 */
////////////////////////////////////////////////////////////////////////////////
#ifndef __MQTT_CFG_H
#define __MQTT_CFG_H

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>


////////////////////////////////////////////////////////////////////////////////
// CONFIG Definitions
////////////////////////////////////////////////////////////////////////////////

#define MQTT_BROKER_ADRESS_URI  "mqtts://test.mosquitto.org:8883"   // Broker URL
#define MQTT_USER_TOPIC         "nom_ta_test"                       // Topic name

////////////////////////////////////////////////////////////////////////////////
// CONFIG Typedefs
////////////////////////////////////////////////////////////////////////////////

/**
 *  Enum containing signal messages from the other components.
 */
typedef enum 
{
    eMQTT_SIGNAL_MSG_BUTTON_IT = 0,
    eMQTT_SIGNAL_NUM_OF                 // This line should never be erased
}mqtt_signal_message_e;

/**
 *  Operation modes for publishing temperatures.
 */
typedef enum 
{
    eMQTT_OPERATION_DHT22_INTERVAL_5S         = 0 ,
    eMQTT_OPERATION_DHT22_BUTTON_INTERRUPT,
    eMQTT_OPERATION_DHT22_BROKER_REQUEST,
    eMQTT_OPERATION_NUM_OF                  // This line should never be erased     
}mqtt_opmode_e;

/**
 *  Structure containing signal messaging enum, passed to queue.
 */
typedef struct
{
    mqtt_signal_message_e msgID;
}mqtt_signal_message_t;


////////////////////////////////////////////////////////////////////////////////
// CONFIG Function Prototypes
////////////////////////////////////////////////////////////////////////////////
void mqtt_get_payload_string(char* payload, mqtt_opmode_e opmode);

#endif /* __MQTT_CFG_H  */

////////////////////////////////////////////////////////////////////////////////
/*!
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////